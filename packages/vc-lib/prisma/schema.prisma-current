generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model directus_activity {
  id                 Int                  @id @default(autoincrement()) @db.UnsignedInt
  action             String               @db.VarChar(45)
  user               String?              @db.Char(36)
  timestamp          DateTime             @default(now()) @db.Timestamp(0)
  ip                 String?              @db.VarChar(50)
  user_agent         String?              @db.VarChar(255)
  collection         String               @db.VarChar(64)
  item               String               @db.VarChar(255)
  comment            String?              @db.Text
  directus_revisions directus_revisions[]

  @@index([collection], map: "directus_activity_collection_foreign")
}

model directus_collections {
  collection                 String                 @id @db.VarChar(64)
  icon                       String?                @db.VarChar(30)
  note                       String?                @db.Text
  display_template           String?                @db.VarChar(255)
  hidden                     Boolean                @default(false)
  singleton                  Boolean                @default(false)
  translations               String?                @db.LongText
  archive_field              String?                @db.VarChar(64)
  archive_app_filter         Boolean                @default(true)
  archive_value              String?                @db.VarChar(255)
  unarchive_value            String?                @db.VarChar(255)
  sort_field                 String?                @db.VarChar(64)
  accountability             String?                @default("all") @db.VarChar(255)
  color                      String?                @db.VarChar(255)
  item_duplication_fields    String?                @db.LongText
  sort                       Int?
  group                      String?                @db.VarChar(64)
  collapse                   String                 @default("open") @db.VarChar(255)
  directus_collections       directus_collections?  @relation("directus_collectionsTodirectus_collections", fields: [group], references: [collection], onDelete: Restrict, onUpdate: Restrict, map: "directus_collections_group_foreign")
  other_directus_collections directus_collections[] @relation("directus_collectionsTodirectus_collections")
  directus_shares            directus_shares[]

  @@index([group], map: "directus_collections_group_foreign")
}

model directus_dashboards {
  id              String            @id @db.Char(36)
  name            String            @db.VarChar(255)
  icon            String            @default("dashboard") @db.VarChar(30)
  note            String?           @db.Text
  date_created    DateTime?         @default(now()) @db.Timestamp(0)
  user_created    String?           @db.Char(36)
  color           String?           @db.VarChar(255)
  directus_users  directus_users?   @relation(fields: [user_created], references: [id], onUpdate: Restrict, map: "directus_dashboards_user_created_foreign")
  directus_panels directus_panels[]

  @@index([user_created], map: "directus_dashboards_user_created_foreign")
}

model directus_fields {
  id                 Int      @id @default(autoincrement()) @db.UnsignedInt
  collection         String   @db.VarChar(64)
  field              String   @db.VarChar(64)
  special            String?  @db.VarChar(64)
  interface          String?  @db.VarChar(64)
  options            String?  @db.LongText
  display            String?  @db.VarChar(64)
  display_options    String?  @db.LongText
  readonly           Boolean  @default(false)
  hidden             Boolean  @default(false)
  sort               Int?     @db.UnsignedInt
  width              String?  @default("full") @db.VarChar(30)
  translations       String?  @db.LongText
  note               String?  @db.Text
  conditions         String?  @db.LongText
  required           Boolean? @default(false)
  group              String?  @db.VarChar(64)
  validation         String?  @db.LongText
  validation_message String?  @db.Text

  @@index([collection], map: "directus_fields_collection_foreign")
}

model directus_files {
  id                                                                    String              @id @db.Char(36)
  storage                                                               String              @db.VarChar(255)
  filename_disk                                                         String?             @db.VarChar(255)
  filename_download                                                     String              @db.VarChar(255)
  title                                                                 String?             @db.VarChar(255)
  type                                                                  String?             @db.VarChar(255)
  folder                                                                String?             @db.Char(36)
  uploaded_by                                                           String?             @db.Char(36)
  uploaded_on                                                           DateTime            @default(now()) @db.Timestamp(0)
  modified_by                                                           String?             @db.Char(36)
  modified_on                                                           DateTime            @default(now()) @db.Timestamp(0)
  charset                                                               String?             @db.VarChar(50)
  filesize                                                              BigInt?
  width                                                                 Int?                @db.UnsignedInt
  height                                                                Int?                @db.UnsignedInt
  duration                                                              Int?                @db.UnsignedInt
  embed                                                                 String?             @db.VarChar(200)
  description                                                           String?             @db.Text
  location                                                              String?             @db.Text
  tags                                                                  String?             @db.Text
  metadata                                                              String?             @db.LongText
  groupId                                                               Int?                @db.UnsignedInt
  directus_folders                                                      directus_folders?   @relation(fields: [folder], references: [id], onUpdate: Restrict, map: "directus_files_folder_foreign")
  group                                                                 group?              @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "directus_files_groupid_foreign")
  directus_users_directus_files_modified_byTodirectus_users             directus_users?     @relation("directus_files_modified_byTodirectus_users", fields: [modified_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_files_modified_by_foreign")
  directus_users_directus_files_uploaded_byTodirectus_users             directus_users?     @relation("directus_files_uploaded_byTodirectus_users", fields: [uploaded_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_files_uploaded_by_foreign")
  directus_settings_directus_filesTodirectus_settings_project_logo      directus_settings[] @relation("directus_filesTodirectus_settings_project_logo")
  directus_settings_directus_filesTodirectus_settings_public_background directus_settings[] @relation("directus_filesTodirectus_settings_public_background")
  directus_settings_directus_filesTodirectus_settings_public_foreground directus_settings[] @relation("directus_filesTodirectus_settings_public_foreground")
  footer                                                                footer[]
  header                                                                header[]
  hero                                                                  hero[]
  ws_page                                                               ws_page[]
  ws_section_directus_filesTows_section_sectionImage2                   ws_section[]        @relation("directus_filesTows_section_sectionImage2")
  ws_section_directus_filesTows_section_sectionImage                    ws_section[]        @relation("directus_filesTows_section_sectionImage")
  ws_section_item                                                       ws_section_item[]
  ws_website_directus_filesTows_website_favicon                         ws_website[]        @relation("directus_filesTows_website_favicon")
  ws_website_directus_filesTows_website_footerLandscapeLogo             ws_website[]        @relation("directus_filesTows_website_footerLandscapeLogo")
  ws_website_directus_filesTows_website_landscapeLogo                   ws_website[]        @relation("directus_filesTows_website_landscapeLogo")

  @@index([folder], map: "directus_files_folder_foreign")
  @@index([groupId], map: "directus_files_groupid_foreign")
  @@index([modified_by], map: "directus_files_modified_by_foreign")
  @@index([uploaded_by], map: "directus_files_uploaded_by_foreign")
}

model directus_flows {
  id                  String                @id @db.Char(36)
  name                String                @db.VarChar(255)
  icon                String?               @db.VarChar(30)
  color               String?               @db.VarChar(255)
  description         String?               @db.Text
  status              String                @default("active") @db.VarChar(255)
  trigger             String?               @db.VarChar(255)
  accountability      String?               @default("all") @db.VarChar(255)
  options             String?               @db.LongText
  operation           String?               @unique(map: "directus_flows_operation_unique") @db.Char(36)
  date_created        DateTime?             @default(now()) @db.Timestamp(0)
  user_created        String?               @db.Char(36)
  directus_users      directus_users?       @relation(fields: [user_created], references: [id], onUpdate: Restrict, map: "directus_flows_user_created_foreign")
  directus_operations directus_operations[]

  @@index([user_created], map: "directus_flows_user_created_foreign")
}

model directus_folders {
  id                     String              @id @db.Char(36)
  name                   String              @db.VarChar(255)
  parent                 String?             @db.Char(36)
  groupId                Int?                @db.UnsignedInt
  group                  group?              @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "directus_folders_groupid_foreign")
  directus_folders       directus_folders?   @relation("directus_foldersTodirectus_folders", fields: [parent], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_folders_parent_foreign")
  directus_files         directus_files[]
  other_directus_folders directus_folders[]  @relation("directus_foldersTodirectus_folders")
  directus_settings      directus_settings[]

  @@index([groupId], map: "directus_folders_groupid_foreign")
  @@index([parent], map: "directus_folders_parent_foreign")
}

model directus_migrations {
  version   String    @id @db.VarChar(255)
  name      String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamp(0)
}

model directus_notifications {
  id                                                              Int             @id @default(autoincrement()) @db.UnsignedInt
  timestamp                                                       DateTime?       @default(now()) @db.Timestamp(0)
  status                                                          String?         @default("inbox") @db.VarChar(255)
  recipient                                                       String          @db.Char(36)
  sender                                                          String?         @db.Char(36)
  subject                                                         String          @db.VarChar(255)
  message                                                         String?         @db.Text
  collection                                                      String?         @db.VarChar(64)
  item                                                            String?         @db.VarChar(255)
  directus_users_directus_notifications_recipientTodirectus_users directus_users  @relation("directus_notifications_recipientTodirectus_users", fields: [recipient], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_notifications_recipient_foreign")
  directus_users_directus_notifications_senderTodirectus_users    directus_users? @relation("directus_notifications_senderTodirectus_users", fields: [sender], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_notifications_sender_foreign")

  @@index([recipient], map: "directus_notifications_recipient_foreign")
  @@index([sender], map: "directus_notifications_sender_foreign")
}

model directus_operations {
  id                                                                         String               @id @db.Char(36)
  name                                                                       String?              @db.VarChar(255)
  key                                                                        String               @db.VarChar(255)
  type                                                                       String               @db.VarChar(255)
  position_x                                                                 Int
  position_y                                                                 Int
  options                                                                    String?              @db.LongText
  resolve                                                                    String?              @unique(map: "directus_operations_resolve_unique") @db.Char(36)
  reject                                                                     String?              @unique(map: "directus_operations_reject_unique") @db.Char(36)
  flow                                                                       String               @db.Char(36)
  date_created                                                               DateTime?            @default(now()) @db.Timestamp(0)
  user_created                                                               String?              @db.Char(36)
  directus_flows                                                             directus_flows       @relation(fields: [flow], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_operations_flow_foreign")
  directus_operations_directus_operationsTodirectus_operations_reject        directus_operations? @relation("directus_operationsTodirectus_operations_reject", fields: [reject], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_operations_reject_foreign")
  directus_operations_directus_operationsTodirectus_operations_resolve       directus_operations? @relation("directus_operationsTodirectus_operations_resolve", fields: [resolve], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_operations_resolve_foreign")
  directus_users                                                             directus_users?      @relation(fields: [user_created], references: [id], onUpdate: Restrict, map: "directus_operations_user_created_foreign")
  other_directus_operations_directus_operationsTodirectus_operations_reject  directus_operations? @relation("directus_operationsTodirectus_operations_reject")
  other_directus_operations_directus_operationsTodirectus_operations_resolve directus_operations? @relation("directus_operationsTodirectus_operations_resolve")

  @@index([flow], map: "directus_operations_flow_foreign")
  @@index([user_created], map: "directus_operations_user_created_foreign")
}

model directus_panels {
  id                  String              @id @db.Char(36)
  dashboard           String              @db.Char(36)
  name                String?             @db.VarChar(255)
  icon                String?             @db.VarChar(30)
  color               String?             @db.VarChar(10)
  show_header         Boolean             @default(false)
  note                String?             @db.Text
  type                String              @db.VarChar(255)
  position_x          Int
  position_y          Int
  width               Int
  height              Int
  options             String?             @db.LongText
  date_created        DateTime?           @default(now()) @db.Timestamp(0)
  user_created        String?             @db.Char(36)
  directus_dashboards directus_dashboards @relation(fields: [dashboard], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_panels_dashboard_foreign")
  directus_users      directus_users?     @relation(fields: [user_created], references: [id], onUpdate: Restrict, map: "directus_panels_user_created_foreign")

  @@index([dashboard], map: "directus_panels_dashboard_foreign")
  @@index([user_created], map: "directus_panels_user_created_foreign")
}

model directus_permissions {
  id             Int             @id @default(autoincrement()) @db.UnsignedInt
  role           String?         @db.Char(36)
  collection     String          @db.VarChar(64)
  action         String          @db.VarChar(10)
  permissions    String?         @db.LongText
  validation     String?         @db.LongText
  presets        String?         @db.LongText
  fields         String?         @db.Text
  directus_roles directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_permissions_role_foreign")

  @@index([collection], map: "directus_permissions_collection_foreign")
  @@index([role], map: "directus_permissions_role_foreign")
}

model directus_presets {
  id               Int             @id @default(autoincrement()) @db.UnsignedInt
  bookmark         String?         @db.VarChar(255)
  user             String?         @db.Char(36)
  role             String?         @db.Char(36)
  collection       String?         @db.VarChar(64)
  search           String?         @db.VarChar(100)
  layout           String?         @default("tabular") @db.VarChar(100)
  layout_query     String?         @db.LongText
  layout_options   String?         @db.LongText
  refresh_interval Int?
  filter           String?         @db.LongText
  icon             String          @default("bookmark_outline") @db.VarChar(30)
  color            String?         @db.VarChar(255)
  directus_roles   directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_presets_role_foreign")
  directus_users   directus_users? @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_presets_user_foreign")

  @@index([collection], map: "directus_presets_collection_foreign")
  @@index([role], map: "directus_presets_role_foreign")
  @@index([user], map: "directus_presets_user_foreign")
}

model directus_relations {
  id                      Int     @id @default(autoincrement()) @db.UnsignedInt
  many_collection         String  @db.VarChar(64)
  many_field              String  @db.VarChar(64)
  one_collection          String? @db.VarChar(64)
  one_field               String? @db.VarChar(64)
  one_collection_field    String? @db.VarChar(64)
  one_allowed_collections String? @db.Text
  junction_field          String? @db.VarChar(64)
  sort_field              String? @db.VarChar(64)
  one_deselect_action     String  @default("nullify") @db.VarChar(255)

  @@index([many_collection], map: "directus_relations_many_collection_foreign")
  @@index([one_collection], map: "directus_relations_one_collection_foreign")
}

model directus_revisions {
  id                       Int                  @id @default(autoincrement()) @db.UnsignedInt
  activity                 Int                  @db.UnsignedInt
  collection               String               @db.VarChar(64)
  item                     String               @db.VarChar(255)
  data                     String?              @db.LongText
  delta                    String?              @db.LongText
  parent                   Int?                 @db.UnsignedInt
  directus_activity        directus_activity    @relation(fields: [activity], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_revisions_activity_foreign")
  directus_revisions       directus_revisions?  @relation("directus_revisionsTodirectus_revisions", fields: [parent], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_revisions_parent_foreign")
  other_directus_revisions directus_revisions[] @relation("directus_revisionsTodirectus_revisions")

  @@index([activity], map: "directus_revisions_activity_foreign")
  @@index([collection], map: "directus_revisions_collection_foreign")
  @@index([parent], map: "directus_revisions_parent_foreign")
}

model directus_roles {
  id                   String                 @id @db.Char(36)
  name                 String                 @db.VarChar(100)
  icon                 String                 @default("supervised_user_circle") @db.VarChar(30)
  description          String?                @db.Text
  ip_access            String?                @db.Text
  enforce_tfa          Boolean                @default(false)
  admin_access         Boolean                @default(false)
  app_access           Boolean                @default(true)
  groupId              Int?                   @db.UnsignedInt
  groupRole            String?                @db.VarChar(255)
  group                group?                 @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "directus_roles_groupid_foreign")
  directus_permissions directus_permissions[]
  directus_presets     directus_presets[]
  directus_shares      directus_shares[]
  directus_users       directus_users[]

  @@index([groupId], map: "directus_roles_groupid_foreign")
}

model directus_sessions {
  token           String           @id @db.VarChar(64)
  user            String?          @db.Char(36)
  expires         DateTime         @default(now()) @db.Timestamp(0)
  ip              String?          @db.VarChar(255)
  user_agent      String?          @db.VarChar(255)
  share           String?          @db.Char(36)
  directus_shares directus_shares? @relation(fields: [share], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_sessions_share_foreign")
  directus_users  directus_users?  @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_sessions_user_foreign")

  @@index([share], map: "directus_sessions_share_foreign")
  @@index([user], map: "directus_sessions_user_foreign")
}

model directus_settings {
  id                                                                 Int               @id @default(autoincrement()) @db.UnsignedInt
  project_name                                                       String            @default("Directus") @db.VarChar(100)
  project_url                                                        String?           @db.VarChar(255)
  project_color                                                      String?           @db.VarChar(50)
  project_logo                                                       String?           @db.Char(36)
  public_foreground                                                  String?           @db.Char(36)
  public_background                                                  String?           @db.Char(36)
  public_note                                                        String?           @db.Text
  auth_login_attempts                                                Int?              @default(25) @db.UnsignedInt
  auth_password_policy                                               String?           @db.VarChar(100)
  storage_asset_transform                                            String?           @default("all") @db.VarChar(7)
  storage_asset_presets                                              String?           @db.LongText
  custom_css                                                         String?           @db.Text
  storage_default_folder                                             String?           @db.Char(36)
  basemaps                                                           String?           @db.LongText
  mapbox_key                                                         String?           @db.VarChar(255)
  module_bar                                                         String?           @db.LongText
  project_descriptor                                                 String?           @db.VarChar(100)
  translation_strings                                                String?           @db.LongText
  default_language                                                   String            @default("en-US") @db.VarChar(255)
  custom_aspect_ratios                                               String?           @db.LongText
  directus_files_directus_filesTodirectus_settings_project_logo      directus_files?   @relation("directus_filesTodirectus_settings_project_logo", fields: [project_logo], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_settings_project_logo_foreign")
  directus_files_directus_filesTodirectus_settings_public_background directus_files?   @relation("directus_filesTodirectus_settings_public_background", fields: [public_background], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_settings_public_background_foreign")
  directus_files_directus_filesTodirectus_settings_public_foreground directus_files?   @relation("directus_filesTodirectus_settings_public_foreground", fields: [public_foreground], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "directus_settings_public_foreground_foreign")
  directus_folders                                                   directus_folders? @relation(fields: [storage_default_folder], references: [id], onUpdate: Restrict, map: "directus_settings_storage_default_folder_foreign")

  @@index([project_logo], map: "directus_settings_project_logo_foreign")
  @@index([public_background], map: "directus_settings_public_background_foreign")
  @@index([public_foreground], map: "directus_settings_public_foreground_foreign")
  @@index([storage_default_folder], map: "directus_settings_storage_default_folder_foreign")
}

model directus_shares {
  id                   String                @id @db.Char(36)
  name                 String?               @db.VarChar(255)
  collection           String?               @db.VarChar(64)
  item                 String?               @db.VarChar(255)
  role                 String?               @db.Char(36)
  password             String?               @db.VarChar(255)
  user_created         String?               @db.Char(36)
  date_created         DateTime?             @default(now()) @db.Timestamp(0)
  date_start           DateTime?             @db.Timestamp(0)
  date_end             DateTime?             @db.Timestamp(0)
  times_used           Int?                  @default(0)
  max_uses             Int?
  directus_collections directus_collections? @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: Restrict, map: "directus_shares_collection_foreign")
  directus_roles       directus_roles?       @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "directus_shares_role_foreign")
  directus_users       directus_users?       @relation(fields: [user_created], references: [id], onUpdate: Restrict, map: "directus_shares_user_created_foreign")
  directus_sessions    directus_sessions[]

  @@index([collection], map: "directus_shares_collection_foreign")
  @@index([role], map: "directus_shares_role_foreign")
  @@index([user_created], map: "directus_shares_user_created_foreign")
}

model directus_users {
  id                                                                      String                   @id @db.Char(36)
  first_name                                                              String?                  @db.VarChar(50)
  last_name                                                               String?                  @db.VarChar(50)
  email                                                                   String?                  @unique(map: "directus_users_email_unique") @db.VarChar(128)
  password                                                                String?                  @db.VarChar(255)
  location                                                                String?                  @db.VarChar(255)
  title                                                                   String?                  @db.VarChar(50)
  description                                                             String?                  @db.Text
  tags                                                                    String?                  @db.LongText
  avatar                                                                  String?                  @db.Char(36)
  language                                                                String?                  @db.VarChar(255)
  theme                                                                   String?                  @default("auto") @db.VarChar(20)
  tfa_secret                                                              String?                  @db.VarChar(255)
  status                                                                  String                   @default("active") @db.VarChar(16)
  role                                                                    String?                  @db.Char(36)
  token                                                                   String?                  @unique(map: "directus_users_token_unique") @db.VarChar(255)
  last_access                                                             DateTime?                @db.Timestamp(0)
  last_page                                                               String?                  @db.VarChar(255)
  provider                                                                String                   @default("default") @db.VarChar(128)
  external_identifier                                                     String?                  @unique(map: "directus_users_external_identifier_unique") @db.VarChar(255)
  auth_data                                                               String?                  @db.LongText
  email_notifications                                                     Boolean?                 @default(true)
  phone                                                                   String?                  @db.VarChar(255)
  currentGroupId                                                          Int?                     @db.UnsignedInt
  currentGroup                                                            group?                   @relation("directus_users_currentGroupIdTogroup", fields: [currentGroupId], references: [id], onUpdate: Restrict, map: "directus_users_currentgroupid_foreign")
  directus_roles                                                          directus_roles?          @relation(fields: [role], references: [id], onUpdate: Restrict, map: "directus_users_role_foreign")
  directus_dashboards                                                     directus_dashboards[]
  directus_files_directus_files_modified_byTodirectus_users               directus_files[]         @relation("directus_files_modified_byTodirectus_users")
  directus_files_directus_files_uploaded_byTodirectus_users               directus_files[]         @relation("directus_files_uploaded_byTodirectus_users")
  directus_flows                                                          directus_flows[]
  directus_notifications_directus_notifications_recipientTodirectus_users directus_notifications[] @relation("directus_notifications_recipientTodirectus_users")
  directus_notifications_directus_notifications_senderTodirectus_users    directus_notifications[] @relation("directus_notifications_senderTodirectus_users")
  directus_operations                                                     directus_operations[]
  directus_panels                                                         directus_panels[]
  directus_presets                                                        directus_presets[]
  directus_sessions                                                       directus_sessions[]
  directus_shares                                                         directus_shares[]
  donation_directus_usersTodonation_user_created                          donation[]               @relation("directus_usersTodonation_user_created")
  donation_directus_usersTodonation_user_updated                          donation[]               @relation("directus_usersTodonation_user_updated")
  footer_directus_usersTofooter_user_created                              footer[]                 @relation("directus_usersTofooter_user_created")
  footer_directus_usersTofooter_user_updated                              footer[]                 @relation("directus_usersTofooter_user_updated")
  group_directus_usersTogroup_user_created                                group[]                  @relation("directus_usersTogroup_user_created")
  group_directus_usersTogroup_user_updated                                group[]                  @relation("directus_usersTogroup_user_updated")
  group_memb_directus_usersTogroup_memb_uid                               group_memb[]             @relation("directus_usersTogroup_memb_uid")
  group_memb_directus_usersTogroup_memb_user_created                      group_memb[]             @relation("directus_usersTogroup_memb_user_created")
  group_memb_directus_usersTogroup_memb_user_updated                      group_memb[]             @relation("directus_usersTogroup_memb_user_updated")
  header_directus_usersToheader_user_created                              header[]                 @relation("directus_usersToheader_user_created")
  header_directus_usersToheader_user_updated                              header[]                 @relation("directus_usersToheader_user_updated")
  hero_directus_usersTohero_user_created                                  hero[]                   @relation("directus_usersTohero_user_created")
  hero_directus_usersTohero_user_updated                                  hero[]                   @relation("directus_usersTohero_user_updated")
  privacy_directus_usersToprivacy_user_created                            privacy[]                @relation("directus_usersToprivacy_user_created")
  privacy_directus_usersToprivacy_user_updated                            privacy[]                @relation("directus_usersToprivacy_user_updated")
  terms_directus_usersToterms_user_created                                terms[]                  @relation("directus_usersToterms_user_created")
  terms_directus_usersToterms_user_updated                                terms[]                  @relation("directus_usersToterms_user_updated")
  ws_link_directus_usersTows_link_user_created                            ws_link[]                @relation("directus_usersTows_link_user_created")
  ws_link_directus_usersTows_link_user_updated                            ws_link[]                @relation("directus_usersTows_link_user_updated")
  ws_page_directus_usersTows_page_user_created                            ws_page[]                @relation("directus_usersTows_page_user_created")
  ws_page_directus_usersTows_page_user_updated                            ws_page[]                @relation("directus_usersTows_page_user_updated")
  ws_section_directus_usersTows_section_user_created                      ws_section[]             @relation("directus_usersTows_section_user_created")
  ws_section_directus_usersTows_section_user_updated                      ws_section[]             @relation("directus_usersTows_section_user_updated")
  ws_section_item_directus_usersTows_section_item_user_created            ws_section_item[]        @relation("directus_usersTows_section_item_user_created")
  ws_section_item_directus_usersTows_section_item_user_updated            ws_section_item[]        @relation("directus_usersTows_section_item_user_updated")
  ws_website_directus_usersTows_website_user_created                      ws_website[]             @relation("directus_usersTows_website_user_created")
  ws_website_directus_usersTows_website_user_updated                      ws_website[]             @relation("directus_usersTows_website_user_updated")

  @@index([currentGroupId], map: "directus_users_currentgroupid_foreign")
  @@index([role], map: "directus_users_role_foreign")
}

model directus_webhooks {
  id          Int     @id @default(autoincrement()) @db.UnsignedInt
  name        String  @db.VarChar(255)
  method      String  @default("POST") @db.VarChar(10)
  url         String  @db.VarChar(255)
  status      String  @default("active") @db.VarChar(10)
  data        Boolean @default(true)
  actions     String  @db.VarChar(100)
  collections String  @db.VarChar(255)
  headers     String? @db.LongText
}

model donation {
  id                                                   Int             @id @default(autoincrement()) @db.UnsignedInt
  sort                                                 Int?
  user_created                                         String?         @db.Char(36)
  date_created                                         DateTime?       @db.Timestamp(0)
  user_updated                                         String?         @db.Char(36)
  date_updated                                         DateTime?       @db.Timestamp(0)
  donationStatus                                       String?         @db.VarChar(255)
  donationDate                                         DateTime?       @db.Date
  donationAmount                                       Decimal?        @db.Decimal(10, 5)
  paymentType                                          String?         @db.VarChar(255)
  donationMethod                                       String?         @db.VarChar(255)
  donorEmail                                           String?         @db.VarChar(255)
  donorName                                            String?         @db.VarChar(255)
  donorAddress                                         String?         @db.VarChar(255)
  donorPhone                                           String?         @db.VarChar(255)
  directus_users_directus_usersTodonation_user_created directus_users? @relation("directus_usersTodonation_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "donation_user_created_foreign")
  directus_users_directus_usersTodonation_user_updated directus_users? @relation("directus_usersTodonation_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "donation_user_updated_foreign")

  @@index([user_created], map: "donation_user_created_foreign")
  @@index([user_updated], map: "donation_user_updated_foreign")
}

model footer {
  id                                                 Int             @id @default(autoincrement()) @db.UnsignedInt
  status                                             String          @default("draft") @db.VarChar(255)
  sort                                               Int?
  user_created                                       String?         @db.Char(36)
  date_created                                       DateTime?       @db.Timestamp(0)
  user_updated                                       String?         @db.Char(36)
  date_updated                                       DateTime?       @db.Timestamp(0)
  image                                              String?         @db.Char(36)
  text                                               String?         @db.VarChar(255)
  socialLinks                                        String?         @db.LongText
  legalLinks                                         String?         @db.LongText
  directus_files                                     directus_files? @relation(fields: [image], references: [id], onUpdate: Restrict, map: "footer_image_foreign")
  directus_users_directus_usersTofooter_user_created directus_users? @relation("directus_usersTofooter_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "footer_user_created_foreign")
  directus_users_directus_usersTofooter_user_updated directus_users? @relation("directus_usersTofooter_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "footer_user_updated_foreign")

  @@index([image], map: "footer_image_foreign")
  @@index([user_created], map: "footer_user_created_foreign")
  @@index([user_updated], map: "footer_user_updated_foreign")
}

model group {
  id                                                  Int                @id @default(autoincrement()) @db.UnsignedInt
  status                                              String             @default("draft") @db.VarChar(255)
  sort                                                Int?
  user_created                                        String?            @db.Char(36)
  date_created                                        DateTime?          @db.Timestamp(0)
  user_updated                                        String?            @db.Char(36)
  date_updated                                        DateTime?          @db.Timestamp(0)
  groupname                                           String?            @db.VarChar(255)
  groupDisplayName                                    String?            @db.VarChar(255)
  groupDescription                                    String?            @db.Text
  groupPrefs                                          String?            @db.LongText
  groupType                                           String?            @db.VarChar(255)
  defaultGroupRoleId                                  Int?               @db.UnsignedInt
  group_role                                          group_role?        @relation(fields: [defaultGroupRoleId], references: [id], onUpdate: Restrict, map: "group_defaultgrouproleid_foreign")
  directus_users_directus_usersTogroup_user_created   directus_users?    @relation("directus_usersTogroup_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "group_user_created_foreign")
  directus_users_directus_usersTogroup_user_updated   directus_users?    @relation("directus_usersTogroup_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "group_user_updated_foreign")
  directus_files                                      directus_files[]
  directus_folders                                    directus_folders[]
  directus_roles                                      directus_roles[]
  directus_users_directus_users_currentGroupIdTogroup directus_users[]   @relation("directus_users_currentGroupIdTogroup")
  group_memb                                          group_memb[]
  ws_link                                             ws_link[]
  ws_page                                             ws_page[]
  ws_section                                          ws_section[]
  ws_section_item                                     ws_section_item[]
  ws_website                                          ws_website[]

  @@index([defaultGroupRoleId], map: "group_defaultgrouproleid_foreign")
  @@index([user_created], map: "group_user_created_foreign")
  @@index([user_updated], map: "group_user_updated_foreign")
}

model group_memb {
  id                                                     Int                @id @default(autoincrement()) @db.UnsignedInt
  sort                                                   Int?
  user_created                                           String?            @db.Char(36)
  date_created                                           DateTime?          @db.Timestamp(0)
  user_updated                                           String?            @db.Char(36)
  date_updated                                           DateTime?          @db.Timestamp(0)
  groupMembPrefs                                         String?            @db.LongText
  groupMembStatusId                                      Int?               @db.UnsignedInt
  groupRoleId                                            Int?               @db.UnsignedInt
  gid                                                    Int?               @db.UnsignedInt
  uid                                                    String?            @db.Char(36)
  group                                                  group?             @relation(fields: [gid], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "group_memb_gid_foreign")
  group_memb_status                                      group_memb_status? @relation(fields: [groupMembStatusId], references: [id], onDelete: NoAction, onUpdate: Restrict, map: "group_memb_groupmembstatusid_foreign")
  group_role                                             group_role?        @relation(fields: [groupRoleId], references: [id], onUpdate: Restrict, map: "group_memb_grouproleid_foreign")
  directus_users_directus_usersTogroup_memb_uid          directus_users?    @relation("directus_usersTogroup_memb_uid", fields: [uid], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "group_memb_uid_foreign")
  directus_users_directus_usersTogroup_memb_user_created directus_users?    @relation("directus_usersTogroup_memb_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "group_memb_user_created_foreign")
  directus_users_directus_usersTogroup_memb_user_updated directus_users?    @relation("directus_usersTogroup_memb_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "group_memb_user_updated_foreign")

  @@index([gid], map: "group_memb_gid_foreign")
  @@index([groupMembStatusId], map: "group_memb_groupmembstatusid_foreign")
  @@index([groupRoleId], map: "group_memb_grouproleid_foreign")
  @@index([uid], map: "group_memb_uid_foreign")
  @@index([user_created], map: "group_memb_user_created_foreign")
  @@index([user_updated], map: "group_memb_user_updated_foreign")
}

model group_memb_status {
  id              Int          @id @default(autoincrement()) @db.UnsignedInt
  groupMembStatus String?      @db.VarChar(255)
  group_memb      group_memb[]
}

model group_role {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  groupRole  String?      @db.VarChar(255)
  group      group[]
  group_memb group_memb[]
}

model group_type {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  groupType String? @db.VarChar(255)
}

model header {
  id                                                 Int             @id @default(autoincrement()) @db.UnsignedInt
  status                                             String          @default("draft") @db.VarChar(255)
  sort                                               Int?
  user_created                                       String?         @db.Char(36)
  date_created                                       DateTime?       @db.Timestamp(0)
  user_updated                                       String?         @db.Char(36)
  date_updated                                       DateTime?       @db.Timestamp(0)
  image                                              String?         @db.Char(36)
  links                                              String?         @db.LongText
  directus_files                                     directus_files? @relation(fields: [image], references: [id], onUpdate: Restrict, map: "header_image_foreign")
  directus_users_directus_usersToheader_user_created directus_users? @relation("directus_usersToheader_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "header_user_created_foreign")
  directus_users_directus_usersToheader_user_updated directus_users? @relation("directus_usersToheader_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "header_user_updated_foreign")

  @@index([image], map: "header_image_foreign")
  @@index([user_created], map: "header_user_created_foreign")
  @@index([user_updated], map: "header_user_updated_foreign")
}

model hero {
  id                                               Int             @id @default(autoincrement()) @db.UnsignedInt
  status                                           String          @default("draft") @db.VarChar(255)
  sort                                             Int?
  user_created                                     String?         @db.Char(36)
  date_created                                     DateTime?       @db.Timestamp(0)
  user_updated                                     String?         @db.Char(36)
  date_updated                                     DateTime?       @db.Timestamp(0)
  image                                            String?         @db.Char(36)
  title                                            String?         @db.VarChar(255)
  subtitle                                         String?         @db.VarChar(255)
  directus_files                                   directus_files? @relation(fields: [image], references: [id], onUpdate: Restrict, map: "hero_image_foreign")
  directus_users_directus_usersTohero_user_created directus_users? @relation("directus_usersTohero_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "hero_user_created_foreign")
  directus_users_directus_usersTohero_user_updated directus_users? @relation("directus_usersTohero_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "hero_user_updated_foreign")

  @@index([image], map: "hero_image_foreign")
  @@index([user_created], map: "hero_user_created_foreign")
  @@index([user_updated], map: "hero_user_updated_foreign")
}

model privacy {
  id                                                  Int             @id @default(autoincrement()) @db.UnsignedInt
  status                                              String          @default("draft") @db.VarChar(255)
  sort                                                Int?
  user_created                                        String?         @db.Char(36)
  date_created                                        DateTime?       @db.Timestamp(0)
  user_updated                                        String?         @db.Char(36)
  date_updated                                        DateTime?       @db.Timestamp(0)
  text                                                String?         @db.Text
  directus_users_directus_usersToprivacy_user_created directus_users? @relation("directus_usersToprivacy_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "privacy_user_created_foreign")
  directus_users_directus_usersToprivacy_user_updated directus_users? @relation("directus_usersToprivacy_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "privacy_user_updated_foreign")

  @@index([user_created], map: "privacy_user_created_foreign")
  @@index([user_updated], map: "privacy_user_updated_foreign")
}

model terms {
  id                                                Int             @id @default(autoincrement()) @db.UnsignedInt
  status                                            String          @default("draft") @db.VarChar(255)
  sort                                              Int?
  user_created                                      String?         @db.Char(36)
  date_created                                      DateTime?       @db.Timestamp(0)
  user_updated                                      String?         @db.Char(36)
  date_updated                                      DateTime?       @db.Timestamp(0)
  text                                              String?         @db.Text
  directus_users_directus_usersToterms_user_created directus_users? @relation("directus_usersToterms_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "terms_user_created_foreign")
  directus_users_directus_usersToterms_user_updated directus_users? @relation("directus_usersToterms_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "terms_user_updated_foreign")

  @@index([user_created], map: "terms_user_created_foreign")
  @@index([user_updated], map: "terms_user_updated_foreign")
}

model ws_link {
  id                                                  Int             @id @default(autoincrement()) @db.UnsignedInt
  status                                              String          @default("draft") @db.VarChar(255)
  sort                                                Int?
  user_created                                        String?         @db.Char(36)
  date_created                                        DateTime?       @db.Timestamp(0)
  user_updated                                        String?         @db.Char(36)
  date_updated                                        DateTime?       @db.Timestamp(0)
  groupId                                             Int?            @db.UnsignedInt
  websiteId                                           Int?            @db.UnsignedInt
  linkType                                            String?         @db.VarChar(255)
  url                                                 String?         @db.VarChar(255)
  text                                                String?         @db.VarChar(255)
  newTab                                              Boolean?        @default(false)
  group                                               group?          @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "ws_link_groupid_foreign")
  directus_users_directus_usersTows_link_user_created directus_users? @relation("directus_usersTows_link_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_link_user_created_foreign")
  directus_users_directus_usersTows_link_user_updated directus_users? @relation("directus_usersTows_link_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_link_user_updated_foreign")
  ws_website                                          ws_website?     @relation(fields: [websiteId], references: [id], onUpdate: Restrict, map: "ws_link_websiteid_foreign")

  @@index([groupId], map: "ws_link_groupid_foreign")
  @@index([user_created], map: "ws_link_user_created_foreign")
  @@index([user_updated], map: "ws_link_user_updated_foreign")
  @@index([websiteId], map: "ws_link_websiteid_foreign")
}

model ws_page {
  id                  Int             @id @default(autoincrement()) @db.UnsignedInt
  status              String          @default("draft") @db.VarChar(255)
  sort                Int?
  user_created        String?         @db.Char(36)
  date_created        DateTime?       @db.Timestamp(0)
  user_updated        String?         @db.Char(36)
  date_updated        DateTime?       @db.Timestamp(0)
  pageShortName       String?         @db.VarChar(255)
  pageMetaTitle       String?         @db.VarChar(255)
  pageMetaDescription String?         @db.VarChar(255)
  pageMetaImageId     String?         @map("pageMetaImage") @db.Char(36)
  htmlTitle           String?         @db.VarChar(255)
  websiteId           Int?            @db.UnsignedInt
  pagePath            String?         @db.VarChar(255)
  pageHostPath        String?         @db.VarChar(255)
  isPrimaryNav        Boolean?
  isLoginRequired     Boolean?        @default(false)
  groupId             Int?            @db.UnsignedInt
  group               group?          @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "ws_page_groupid_foreign")
  pageMetaImage       directus_files? @relation(fields: [pageMetaImageId], references: [id], onUpdate: Restrict, map: "ws_page_pagemetaimage_foreign")
  userCreated         directus_users? @relation("directus_usersTows_page_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_page_user_created_foreign")
  userUpdated         directus_users? @relation("directus_usersTows_page_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_page_user_updated_foreign")
  website             ws_website?     @relation(fields: [websiteId], references: [id], onUpdate: Restrict, map: "ws_page_websiteid_foreign")
  sections            ws_section[]

  @@index([groupId], map: "ws_page_groupid_foreign")
  @@index([pageMetaImageId], map: "ws_page_pagemetaimage_foreign")
  @@index([user_created], map: "ws_page_user_created_foreign")
  @@index([user_updated], map: "ws_page_user_updated_foreign")
  @@index([websiteId], map: "ws_page_websiteid_foreign")
}

model ws_section {
  id                Int               @id @default(autoincrement()) @db.UnsignedInt
  status            String            @default("draft") @db.VarChar(255)
  sort              Int?
  user_created      String?           @db.Char(36)
  date_created      DateTime?         @db.Timestamp(0)
  user_updated      String?           @db.Char(36)
  date_updated      DateTime?         @db.Timestamp(0)
  sectionType       String?           @db.VarChar(255)
  sectionTitle      String?           @db.VarChar(255)
  sectionSubtitle   String?           @db.VarChar(255)
  sectionImageId    String?           @map("sectionImage") @db.Char(36)
  sectionText       String?           @db.Text
  pageId            Int?              @db.UnsignedInt
  sectionLinkUrl    String?           @db.VarChar(255)
  sectionLinkText   String?           @db.VarChar(255)
  sectionLinkNewTab Boolean?          @default(false)
  sectionText2      String?           @db.Text
  sectionImage2Id   String?           @map("sectionImage2") @db.Char(36)
  groupId           Int?              @db.UnsignedInt
  group             group?            @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "ws_section_groupid_foreign")
  page              ws_page?          @relation(fields: [pageId], references: [id], onUpdate: Restrict, map: "ws_section_pageid_foreign")
  sectionImage2     directus_files?   @relation("directus_filesTows_section_sectionImage2", fields: [sectionImage2Id], references: [id], onUpdate: Restrict, map: "ws_section_sectionimage2_foreign")
  sectionImage      directus_files?   @relation("directus_filesTows_section_sectionImage", fields: [sectionImageId], references: [id], onUpdate: Restrict, map: "ws_section_sectionimage_foreign")
  userCreated       directus_users?   @relation("directus_usersTows_section_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_section_user_created_foreign")
  userUpdated       directus_users?   @relation("directus_usersTows_section_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_section_user_updated_foreign")
  items             ws_section_item[]

  @@index([groupId], map: "ws_section_groupid_foreign")
  @@index([pageId], map: "ws_section_pageid_foreign")
  @@index([sectionImage2Id], map: "ws_section_sectionimage2_foreign")
  @@index([sectionImageId], map: "ws_section_sectionimage_foreign")
  @@index([user_created], map: "ws_section_user_created_foreign")
  @@index([user_updated], map: "ws_section_user_updated_foreign")
}

model ws_section_item {
  id             Int             @id @default(autoincrement()) @db.UnsignedInt
  status         String          @default("draft") @db.VarChar(255)
  sort           Int?
  user_created   String?         @db.Char(36)
  date_created   DateTime?       @db.Timestamp(0)
  user_updated   String?         @db.Char(36)
  date_updated   DateTime?       @db.Timestamp(0)
  sectionId      Int?            @db.UnsignedInt
  itemTitle      String?         @db.VarChar(255)
  itemSubtitle   String?         @db.VarChar(255)
  itemText       String?         @db.Text
  itemImageId    String?         @map("itemImage") @db.Char(36)
  itemLinkUrl    String?         @db.VarChar(255)
  itemLinkText   String?         @db.VarChar(255)
  itemLinkNewTab Boolean?        @default(false)
  itemTitle2     String?         @db.VarChar(255)
  itemSubtitle2  String?         @db.VarChar(255)
  groupId        Int?            @db.UnsignedInt
  group          group?          @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "ws_section_item_groupid_foreign")
  itemImage      directus_files? @relation(fields: [itemImageId], references: [id], onUpdate: Restrict, map: "ws_section_item_itemimage_foreign")
  section        ws_section?     @relation(fields: [sectionId], references: [id], onUpdate: Restrict, map: "ws_section_item_sectionid_foreign")
  userCreated    directus_users? @relation("directus_usersTows_section_item_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_section_item_user_created_foreign")
  userUpdated    directus_users? @relation("directus_usersTows_section_item_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_section_item_user_updated_foreign")

  @@index([groupId], map: "ws_section_item_groupid_foreign")
  @@index([itemImageId], map: "ws_section_item_itemimage_foreign")
  @@index([sectionId], map: "ws_section_item_sectionid_foreign")
  @@index([user_created], map: "ws_section_item_user_created_foreign")
  @@index([user_updated], map: "ws_section_item_user_updated_foreign")
}

model ws_website {
  id                    Int             @id @default(autoincrement()) @db.UnsignedInt
  sort                  Int?
  user_created          String?         @db.Char(36)
  date_created          DateTime?       @db.Timestamp(0)
  user_updated          String?         @db.Char(36)
  date_updated          DateTime?       @db.Timestamp(0)
  groupId               Int?            @db.UnsignedInt
  domain                String?         @db.VarChar(255)
  baseUrl               String?         @db.VarChar(255)
  baseApiUrl            String?         @db.VarChar(255)
  htmlTitleSuffix       String?         @db.VarChar(255)
  twitterCardType       String?         @db.VarChar(255)
  twitterUsername       String?         @db.VarChar(255)
  hostPath              String?         @db.VarChar(255)
  copyrightName         String?         @db.VarChar(255)
  faviconId             String?         @map("favicon") @db.Char(36)
  landscapeLogoId       String?         @map("landscapeLogo") @db.Char(36)
  footerLandscapeLogoId String?         @map("footerLandscapeLogo") @db.Char(36)
  favicon               directus_files? @relation("directus_filesTows_website_favicon", fields: [faviconId], references: [id], onUpdate: Restrict, map: "ws_website_favicon_foreign")
  footerLandscapeLogo   directus_files? @relation("directus_filesTows_website_footerLandscapeLogo", fields: [footerLandscapeLogoId], references: [id], onUpdate: Restrict, map: "ws_website_footerlandscapelogo_foreign")
  group                 group?          @relation(fields: [groupId], references: [id], onUpdate: Restrict, map: "ws_website_groupid_foreign")
  landscapeLogo         directus_files? @relation("directus_filesTows_website_landscapeLogo", fields: [landscapeLogoId], references: [id], onUpdate: Restrict, map: "ws_website_landscapelogo_foreign")
  userCreated           directus_users? @relation("directus_usersTows_website_user_created", fields: [user_created], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_website_user_created_foreign")
  userUpdated           directus_users? @relation("directus_usersTows_website_user_updated", fields: [user_updated], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "ws_website_user_updated_foreign")
  links                 ws_link[]
  pages                 ws_page[]

  @@index([groupId], map: "ws_website_groupid_foreign")
  @@index([faviconId], map: "ws_website_favicon_foreign")
  @@index([footerLandscapeLogoId], map: "ws_website_footerlandscapelogo_foreign")
  @@index([landscapeLogoId], map: "ws_website_landscapelogo_foreign")
  @@index([user_created], map: "ws_website_user_created_foreign")
  @@index([user_updated], map: "ws_website_user_updated_foreign")
}
